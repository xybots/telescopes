// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClusterRecommendationResp ClusterRecommendationResp encapsulates recommendation result data
// swagger:model ClusterRecommendationResp
type ClusterRecommendationResp struct {

	// Recommended node pools
	NodePools []*NodePool `json:"nodePools"`

	// The cloud provider
	Provider string `json:"provider,omitempty"`

	// Service's region
	Region string `json:"region,omitempty"`

	// Provider's service
	Service string `json:"service,omitempty"`

	// Availability zone in the recommendation - a multi-zone recommendation means that all node pools should expand to all zones
	Zone string `json:"zone,omitempty"`

	// accuracy
	Accuracy *ClusterRecommendationAccuracy `json:"accuracy,omitempty"`
}

// Validate validates this cluster recommendation resp
func (m *ClusterRecommendationResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccuracy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterRecommendationResp) validateNodePools(formats strfmt.Registry) error {

	if swag.IsZero(m.NodePools) { // not required
		return nil
	}

	for i := 0; i < len(m.NodePools); i++ {
		if swag.IsZero(m.NodePools[i]) { // not required
			continue
		}

		if m.NodePools[i] != nil {
			if err := m.NodePools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodePools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterRecommendationResp) validateAccuracy(formats strfmt.Registry) error {

	if swag.IsZero(m.Accuracy) { // not required
		return nil
	}

	if m.Accuracy != nil {
		if err := m.Accuracy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accuracy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterRecommendationResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterRecommendationResp) UnmarshalBinary(b []byte) error {
	var res ClusterRecommendationResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
